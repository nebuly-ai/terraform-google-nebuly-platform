strimzi:
  enabled: true

imagePullSecrets:
  - name: ${image_pull_secret_name}

serviceAccount:
  name: nebuly
  create: true

# Cert-manager issuer.
# Remove this section if you're not using cert-manager for SSL certificates.
clusterIssuer:
  enabled: true
  name: letsencrypt
  email: support@nebuly.ai

backend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-backend"
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
      # ------------
      # Cert-manager issuer.
      # Remove this section if you're not using cert-manager for SSL certificates.
      cert-manager.io/cluster-issuer: letsencrypt
      # ------------
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /backend(/|$)(.*)
            pathType: ImplementationSpecific
    tls:
      - secretName: nebuly-tls
        hosts:
          - ${platform_domain}

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

eventIngestion:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-event-ingestion"

  rootPath: "/event-ingestion"

  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
      # ------------
      # Cert-manager issuer.
      # Remove this section if you're not using cert-manager for SSL certificates.
      cert-manager.io/cluster-issuer: letsencrypt
      # ------------
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /event-ingestion(/|$)(.*)
            pathType: ImplementationSpecific
    tls:
      - secretName: nebuly-tls
        hosts:
          - ${platform_domain}

aiModels:
  registry: "gcp_bucket"
  gcp:
    bucketName: ${gcp_bucket_name}
    projectName: ${gcp_project_name}

  sync:
    enabled: true
    source:
      existingSecret:
        name: ${secret_provider_class_secret_name}
        clientIdKey: ${k8s_secret_key_nebuly_client_id}
        clientSecretKey: ${k8s_secret_key_nebuly_client_secret}
    volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: ${secret_provider_class_name}
    volumeMounts:
      - name: secrets-store
        mountPath: /mnt/secrets-store
        readOnly: true

lionLinguist:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-lion-linguist"

  modelsCache:
    enabled: true
    storageClassName: standard
    accessModes:
      - ReadWriteOnce
  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

ingestionWorker:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-ingestion-worker"

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

primaryProcessing:
  schedule: "0 23 * * *" # Every day at 11:00 PM, cluster's timezone
  resources:
    requests:
      cpu: 1
      memory: 8Gi
    limits:
      nvidia.com/gpu: 1

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: nebuly.com/accelerator
                operator: In
                values:
                  - nvidia-l4
  tolerations:
    - effect: NoSchedule
      key: nvidia.com/gpu
      operator: Exists

kafka:
  external: false
  zookeeper:
    replicas: 1
    storage:
      class: standard-rwo
  replicas: 1
  config:
    offsets.topic.replication.factor: 1
    replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
  storage:
    class: standard-rwo
    size: 32Gi
  resources:
    limits:
      memory: 6Gi
    requests:
      memory: 6Gi

analyticDatabase:
  server: "${analytics_postgres_server_url}"
  name: ${analytics_postgres_db_name}
  existingSecret:
    name: ${secret_provider_class_secret_name}
    userKey: ${k8s_secret_key_analytics_db_username}
    passwordKey: ${k8s_secret_key_analytics_db_password}

auth:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-tenant-registry"

  postgresServer: "${auth_postgres_server_url}"
  postgresDatabase: ${auth_postgres_db_name}
  existingSecret:
    name: ${secret_provider_class_secret_name}
    postgresUserKey: ${k8s_secret_key_auth_db_username}
    postgresPasswordKey: ${k8s_secret_key_auth_db_password}
    jwtSigningKey: ${k8s_secret_key_jwt_signing_key}

  loginModes: "password"

  # TODO: optional Microsoft SSO
  microsoft:
    enabled: false

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/auth/$2"
      nginx.ingress.kubernetes.io/use-regex: "true"
      # ------------
      # Cert-manager issuer.
      # Remove this section if you're not using cert-manager for SSL certificates.
      cert-manager.io/cluster-issuer: letsencrypt
      # ------------
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: "/backend/auth(/|$)(.*)"
            pathType: ImplementationSpecific
    tls:
      - secretName: nebuly-tls
        hosts:
          - ${platform_domain}

frontend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-frontend"

  rootUrl: https://${platform_domain}
  backendApiUrl: https://${platform_domain}/backend
  authApiUrl: https://${platform_domain}/backend/auth
  ingress:
    enabled: true
    annotations:
      # ------------
      # Cert-manager issuer.
      # Remove this section if you're not using cert-manager for SSL certificates.
      cert-manager.io/cluster-issuer: letsencrypt
      # ------------
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: nebuly-tls
        hosts:
          - ${platform_domain}

openAi:
  enabled: true
  gpt4oDeployment: ${openai_gpt4o_deployment}
  endpoint: ${openai_endpoint}

  existingSecret:
    name: ${secret_provider_class_secret_name}
    apiKey: ${k8s_secret_key_openai_api_key}
